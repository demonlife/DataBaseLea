* 基本术语
** 文档
   是mongodb的核心概念, 多个键及其关联的值有序地放置在一起
   1. 文档中的键值对是有序的(通常文档中的键的顺序不重要)
   2. 文档中的值可以不仅仅是字符串, 还可以是其他几种数据类型
   3. 文档的键是字符串, 除少数例外情况, 键可以是任意UTF-8字符
   4. 键不能含有\0(空字符), 该字符用来表示键的结尾
   5. ./$有特别的意义, 特定环境下才能使用
   6. 以_开头的键是保留的, 但不是严格要求的
   7. mongodb的键区分大小写, 值是区分类型的
   8. 文档不能有重复的键
** 集合
   集合是无模式的
   1. 集合名不能是空字符串
   2. 集合名不能含有\0字符
   3. 集合名不能以system. 开头
   4. 用户创建的集合名字不能含有保留字符$
   5. 很多mongodb工具都包含子集合
   6. GridFS是一种存储大文件的协议
   7. MongoDB的web控制台通过子集合的方式将数据组织在DBTOP部分
** 数据库
   多个集合可以组成数据库
   1. 数据库名不能是空字符
   2. 数据库名不得含有空格.$/\和\0
   3. 应全部小写
   4. 最多64字节
   5. 数据库名最终会变成文件系统里的文件
   6. 有些数据库名是保留的, 如:
      admin: 这是"root"数据库, 将用户添加到该数据库, 则该用户自动继承所有数据库的权限
      local: 该数据库永远不会被复制, 可用来存储限于本地单台服务器的任意集合
      config: 当mongodb用于分片设置时, 该数据库在内部使用, 用于保存分片的相关信息
** 启动
   ./mongod 默认的数据目录是/data/db, 使用27017端口, http服务器的端口是28017
** 基本操作
   1. 创建
      post = {'title': 'My Blog Post', 'content': 'here's my blog post.',
          'data': new Date()}
      db.blog.insert(post) #=> 向blog集合中插入数据post
   2. 查看
      db.blog.find()
   3. 更新
      使用update来更新, update接受至少两个参数, 第一个是要更新文档的限定条件, 第二个是新的文档
   4. 删除
      remove从数据库中永久性的删除文档. 在不使用参数进行调用的情况下, 会删除一个集合内的所有文档
** mongodb shell的使用
   help: 获取帮助
   有个了解函数的技巧: 在输入的时候不要输入括号, 这样就会显示该函数的javascript源代码
   当有属性与目标集合同名时, 可以使用getCollection函数
   db.getCollection("version")
   var collections = ["posts", "comments", "authors"]
   for (i in collections) {
       // i = 0, 1, 2
   }
   
* 基本操作
  大于4MB的文档是不能存入数据库的, 在shell中运行Object.bsonsize(doc)可以查看改文档的大小
  MongoDB在插入数据时并不执行代码, 所以没有注入式攻击的可能
  db.blog.remove(): 删除blog集合的所有文档, 但不会删除集合本身, 原有的索引也会保留, 删除数据后不能撤销
  如果需要删除索引, 则可以使用db.drop_collection("collectionname")
** 更新文档
   更新是原子操作, 若是两个更新同时发生, 先到达服务器的先执行, 互相有冲突的更新可以火速传递, 不会互相干扰,
   最后更新的会取得"胜利"
   使用原子的更新修改器, 可以让更新极为高效, 例如:
   db.analytics.update({"url":"www.example.com"}, {"$inc": {"pageview":1}})
   使用修改器时, "_id"的值不能改变, 但是整个文档替换时是可以改变"_id"的, 其他键值包括唯一索引都是可以更改的
*** $set修改器
    $set指定一个键的值, 如果键不存在就创建,有则设置为指定的值, $set甚至可以修改键的数据类型, 也可以修改内嵌文档
    $unset将键完全删除
    示例:
    db.blog.update({"title": "test"}, {"$set": {"createat": new Date()}});
    db.blog.update({"title":"test"}, {"$unset":{"createat": new Date()}});
*** $inc修改器
    $inc是用来增加已有键的值, 或者在键不存在时创建一个键.
    db.games.update({"game":"pinball"}, {"$inc":{"score":50}}) #给score加50(score存在)否则设置score=50
    $inc只能用于数字(整数, 长整数,双精度浮点数), 不能用于字符串、数组或其他非数字类型的值
*** 数组修改器
    若指定的键存在, $push会向已有的数组末尾加入一个元素, 要是没有就会创建一个新的数组
    db.blog.posts.update({"title":"A blog post"}, {$push: {"comment": {"name":"wnb", "content":"good"}}})
    如果一个值不在数组里就将其加进去, 可以在查询文档中用$ne来实现, 例如:
    db.papers.update({"authors": {"$ne":"Richie"}}, {$push:{"authors":"Richie"}});
    也可以使用$addToSet完成同样的事情, 有些情况使用$ne是不行的, 更适合使用$addToSet
    $addToSet在添加值时, 可以避免重复
    $addToSet与$each组合起来可以添加多个不同的值,例如:
    db.users.update({"name":"wnb"}, {$addToSet: {"email":{$each: ["wnb@gmail.com", "wnb@163.com"]}}});
    从数组中删除元素的方法, 可以用$pop, 该修改器可以从数组的一端删除元素,{$pop: {key:1}}从数组末尾删除一个元素
    {$pop: {key: -1}}从头部删除一个元素, $pull基于特定条件来删除元素,$pull,会将所有所有匹配的部分删掉,例如:
    db.lists.update({}, {$pull:{"todo":"ok"}})
*** 数组定位修改器
    数组有多个值, 只想对其中的一部分进行操作, 有两种方法操作数组中的值, 通过位置或者定位操作符$,
    数组都是以0开头的, 可以将下标直接作为键来选择
    
